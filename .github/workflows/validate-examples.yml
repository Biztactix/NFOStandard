name: Validate Example NFO Files

# Workflow Strategy:
# - SchemaUpdate branch: Uses comprehensive local test framework (test_schemas.sh) for v2.0.0 development
# - main/develop branches: Uses legacy remote validation for v1.x compatibility  
# - Schema integrity: Always validates XSD syntax for all branches

on:
  push:
    branches: [ main, develop, SchemaUpdate ]
    paths:
      - '**.xml'
      - '**.xsd'
      - '.github/workflows/validate-examples.yml'
      - 'tools/test_schemas.sh'
  pull_request:
    branches: [ main ]
    paths:
      - '**.xml'
      - '**.xsd'
      - 'tools/test_schemas.sh'

jobs:
  # New comprehensive validation using our test framework
  validate-with-test-framework:
    runs-on: ubuntu-latest
    if: contains(github.ref, 'SchemaUpdate') || contains(github.base_ref, 'SchemaUpdate')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install xmllint
      run: sudo apt-get update && sudo apt-get install -y libxml2-utils
    
    - name: Make test script executable
      run: chmod +x tools/test_schemas.sh
    
    - name: Run comprehensive schema validation
      run: |
        echo "üß™ Running NFOStandard v2.0.0 comprehensive validation..."
        ./tools/test_schemas.sh
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-results
        path: test_output/
        retention-days: 7

  # Legacy validation for backward compatibility (v1.x and main branch)
  validate-nfo-files:
    runs-on: ubuntu-latest
    if: "!contains(github.ref, 'SchemaUpdate') && !contains(github.base_ref, 'SchemaUpdate')"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install lxml requests
    
    - name: Create validation script
      run: |
        cat > validate_examples.py << 'EOF'
        import os
        import sys
        from lxml import etree
        import requests
        from pathlib import Path
        import urllib.parse
        
        def validate_nfo_file(filepath):
            """Validate a single NFO file against its schema."""
            print(f"\nValidating: {filepath}")
            
            try:
                # Parse the XML file
                with open(filepath, 'rb') as f:
                    doc = etree.parse(f)
                
                # Get schema location
                root = doc.getroot()
                schema_location = root.get('{http://www.w3.org/2001/XMLSchema-instance}schemaLocation')
                
                if not schema_location:
                    print(f"  ‚ùå No xsi:schemaLocation attribute found")
                    return False
                
                # Extract schema URL
                parts = schema_location.split()
                if len(parts) >= 2:
                    schema_url = parts[1]
                else:
                    print(f"  ‚ùå Invalid xsi:schemaLocation format")
                    return False
                
                print(f"  üìã Schema URL: {schema_url}")
                
                # Download schema with custom resolver for includes
                response = requests.get(schema_url, timeout=30)
                response.raise_for_status()
                
                # Parse the schema with a custom resolver for includes
                parser = etree.XMLParser()
                parser.resolvers.add(GitHubSchemaResolver(schema_url))
                schema_doc = etree.fromstring(response.content, parser)
                
                # Create XMLSchema object
                schema = etree.XMLSchema(schema_doc)
                
                # Validate
                if schema.validate(doc):
                    print(f"  ‚úÖ Valid NFO file")
                    return True
                else:
                    print(f"  ‚ùå Validation errors:")
                    for error in schema.error_log:
                        print(f"     Line {error.line}: {error.message}")
                    return False
                    
            except etree.XMLSyntaxError as e:
                print(f"  ‚ùå XML syntax error: {e}")
                return False
            except Exception as e:
                print(f"  ‚ùå Error: {e}")
                return False
        
        class GitHubSchemaResolver(etree.Resolver):
            """Resolver that loads schema includes from GitHub raw URLs."""
            def __init__(self, base_url):
                self.base_url = base_url
                super().__init__()
            
            def resolve(self, url, id, context):
                try:
                    # If it's a relative path, make it absolute based on the main schema URL
                    if not url.startswith(('http://', 'https://')):
                        base = self.base_url.rsplit('/', 1)[0]
                        resolved_url = f"{base}/{url}"
                    else:
                        resolved_url = url
                    
                    # Download the included schema
                    response = requests.get(resolved_url, timeout=30)
                    response.raise_for_status()
                    return self.resolve_string(response.content, context)
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  Warning: Could not resolve include {url}: {e}")
                    return None
        
        def main():
            # Find all XML example files
            example_files = []
            for pattern in ['*.xml', 'examples/*.xml', 'Examples/*.xml']:
                example_files.extend(Path('.').glob(pattern))
            
            if not example_files:
                print("No example XML files found!")
                return 1
            
            print(f"Found {len(example_files)} example files to validate")
            
            # Validate each file
            failed_files = []
            for filepath in example_files:
                if not validate_nfo_file(str(filepath)):
                    failed_files.append(str(filepath))
            
            # Summary
            print("\n" + "="*60)
            print(f"Total files: {len(example_files)}")
            print(f"‚úÖ Valid: {len(example_files) - len(failed_files)}")
            print(f"‚ùå Invalid: {len(failed_files)}")
            
            if failed_files:
                print("\nFailed files:")
                for filepath in failed_files:
                    print(f"  - {filepath}")
                return 1
            else:
                print("\nüéâ All example files are valid!")
                return 0
        
        if __name__ == "__main__":
            sys.exit(main())
        EOF
    
    - name: Validate example NFO files (v1.x)
      run: python validate_examples.py

  # Schema integrity validation (runs for all branches)
  validate-schema-integrity:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install xmllint
      run: sudo apt-get update && sudo apt-get install -y libxml2-utils
    
    - name: Validate XSD schemas
      run: |
        echo "Validating XSD schema files..."
        for xsd in Schemas/*.xsd main.xsd; do
          echo -n "Validating $xsd... "
          if xmllint --noout "$xsd" 2>/dev/null; then
            echo "‚úÖ Valid"
          else
            echo "‚ùå Invalid"
            xmllint --noout "$xsd"
            exit 1
          fi
        done